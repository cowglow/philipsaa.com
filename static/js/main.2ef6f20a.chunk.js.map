{"version":3,"sources":["components/app/app.module.css","components/loader/loader.module.css","assets/philipsaa.jpg","assets/world.svg","assets/logo.svg","components/app/app.tsx","components/loader/loader.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","className","styles","root","header","style","backgroundImage","hero","main","fontSize","cta","href","rel","target","src","world","alt","label","Loader","React","useState","state","setState","useEffect","interval","setInterval","disable","clearInterval","logo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,OAAS,oBAAoB,KAAO,kBAAkB,IAAM,iBAAiB,MAAQ,qB,gBCAhID,EAAOC,QAAU,CAAC,KAAO,qBAAqB,QAAU,wBAAwB,gBAAgB,gC,kBCDhGD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,wLCiG5BC,EA5FO,WACpB,OACE,yBAAKC,UAAWC,IAAOC,MACrB,4BACEF,UAAWC,IAAOE,OAClBC,MAAO,CAAEC,gBAAgB,QAAD,OAAUC,IAAV,SAE1B,0BAAMN,UAAWC,IAAOM,MACtB,iCACE,0CACA,qDACwB,6BACtB,yBAAKH,MAAO,CAAEI,SAAU,KAAxB,yBAGJ,iCACE,uBACER,UAAWC,IAAOQ,IAClBC,KAAK,sBACLC,IAAI,sBACJC,OAAO,UAEP,yBAAKC,IAAKC,IAAOC,IAAI,iBANvB,qBAUF,iCACE,gOAKA,iCACM,IACJ,uBACEL,KAAK,8BACLC,IAAI,sBACJC,OAAO,UAHT,YAMK,IARP,uBAYF,iCACE,4BACE,4BACE,yBAAKZ,UAAWC,IAAOe,OAAvB,aACA,4BACE,gEACA,yDAGJ,4BACE,yBAAKhB,UAAWC,IAAOe,OAAvB,SACA,4BACE,4BACE,uBACEN,KAAK,gCACLC,IAAI,sBACJC,OAAO,UAHT,kCAQF,4BACE,uBACEF,KAAK,6BACLC,IAAI,sBACJC,OAAO,UAHT,+BAQF,4BACE,uBACEF,KAAK,sBACLC,IAAI,sBACJC,OAAO,UAHT,+B,uCC1DHK,EAlBU,WAAO,IAAD,EACHC,IAAMC,SAASlB,IAAOC,MADnB,mBACtBkB,EADsB,KACfC,EADe,KAW7B,OATAH,IAAMI,WAAU,WACd,IAAMC,EAAWC,aAAY,WAC3BH,EAASpB,IAAOwB,WACf,KAEH,OAAO,WACLC,cAAcH,MAEf,CAACH,IAEF,yBAAKpB,UAAWoB,GACd,yBAAKP,IAAKc,IAAM3B,UAAWC,IAAO0B,KAAMZ,IAAI,WCL5Ca,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvB,QACfiB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCjGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDenB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACpBC,GACA7B,OAAOC,SAASrB,MAEJkD,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,GAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.2ef6f20a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"app_root__2y0JE\",\"header\":\"app_header__3NHfP\",\"main\":\"app_main__3yfFw\",\"cta\":\"app_cta__3mV45\",\"label\":\"app_label__qvETX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"loader_root__WOaLL\",\"disable\":\"loader_disable__EQ4gg\",\"App-logo-spin\":\"loader_App-logo-spin__2ixtR\"};","module.exports = __webpack_public_path__ + \"static/media/philipsaa.b0697206.jpg\";","module.exports = __webpack_public_path__ + \"static/media/world.eff10b50.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport styles from \"./app.module.css\";\nimport hero from \"../../assets/philipsaa.jpg\";\nimport world from \"../../assets/world.svg\";\n\nconst App: React.FC = () => {\n  return (\n    <div className={styles.root}>\n      <header\n        className={styles.header}\n        style={{ backgroundImage: `url(\"${hero}\")` }}\n      ></header>\n      <main className={styles.main}>\n        <section>\n          <h1>Philip Saa</h1>\n          <h2>\n            MULTIMEDIA SPECIALIST <br />\n            <div style={{ fontSize: 16 }}>IN BAVARIA, GERMANY</div>\n          </h2>\n        </section>\n        <section>\n          <a\n            className={styles.cta}\n            href=\"https://cowglow.com\"\n            rel=\"noreferrer noopener\"\n            target=\"_blank\"\n          >\n            <img src={world} alt=\"website link\" />\n            Visit my Website\n          </a>\n        </section>\n        <section>\n          <p>\n            I like to call myself a Multimedia Specialist. Currently located in\n            southern Germany. My interests range from music theory to film\n            making. I am also interested in programming and Drum and bass.\n          </p>\n          <p>\n            I'm{\" \"}\n            <a\n              href=\"https://twitter.com/cowglow\"\n              rel=\"noreferrer noopener\"\n              target=\"_blank\"\n            >\n              @cowglow\n            </a>{\" \"}\n            on Twitter. DM me!\n          </p>\n        </section>\n        <section>\n          <ul>\n            <li>\n              <div className={styles.label}>Education</div>\n              <ul>\n                <li>California Institute of the Arts</li>\n                <li>Los Angeles Film School</li>\n              </ul>\n            </li>\n            <li>\n              <div className={styles.label}>Links</div>\n              <ul>\n                <li>\n                  <a\n                    href=\"https://instagram.com/cowglow\"\n                    rel=\"noreferrer noopener\"\n                    target=\"_blank\"\n                  >\n                    https://instagram.com/cowglow\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"https://github.com/cowglow\"\n                    rel=\"noreferrer noopener\"\n                    target=\"_blank\"\n                  >\n                    https://github.com/cowglow\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"https://cowglow.com\"\n                    rel=\"noreferrer noopener\"\n                    target=\"_blank\"\n                  >\n                    https://cowglow.com\n                  </a>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </section>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport logo from \"../../assets/logo.svg\";\nimport styles from \"./loader.module.css\";\n\nconst Loader: React.FC = () => {\n  const [state, setState] = React.useState(styles.root);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setState(styles.disable);\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state]);\n  return (\n    <div className={state}>\n      <img src={logo} className={styles.logo} alt=\"logo\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styling/scaffold.css\";\nimport App from \"./components/app/app\";\nimport Loader from \"./components/loader/loader\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Loader />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}